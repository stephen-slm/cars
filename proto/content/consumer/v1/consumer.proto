syntax = 'proto3';

package content.consumer.v1;

import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "compile-and-run-sandbox/internal/gen/pb/consumer/v1";


service ConsumerService {
  rpc Ping (google.protobuf.Empty) returns (PingResponse) {}

  // GetTemplate is designed to allow consumers of the platform to serve the
  // user with a template they can start from. This is more important for
  // languages that require selective formatting or a main function. An example
  // of these languages would be C++, and C.
  rpc GetTemplate (GetTemplateRequest) returns (GetTemplateResponse) {}

  // GetSupportedLanguages will return a list of languages that can be exposed
  // to the user. This response contains a display name for the language that
  // will contain compiler information if important and will also return the
  // code. The code is the value sent to the server when requesting to compile
  // and run.
  rpc GetSupportedLanguages (google.protobuf.Empty) returns (GetSupportedLanguagesResponse) {}

  // CompileQueueRequest is the core compile request endpoint. Calling into this
  // will trigger the flow to run the user-submitted code.
  rpc CreateCompileRequest (CompileRequest) returns (CompileQueueResponse) {}

  // GetCompileResultRequest is required to be called after requesting to
  // compile, all details about the running state and the final output
  // of the compiling and execution are from this.
  rpc GetCompileResultRequest (CompileResultRequest) returns (CompileResultResponse) {}
}

// ########################
// # Ping                ##
// ########################

message PingResponse {
  string message = 1;
}

// ########################
// # Templates           ##
// ########################

message GetTemplateRequest {
  string language = 1 [(validate.rules).string = {
    in: [
      "python2",
      "python",
      "node",
      "rust",
      "ruby",
      "go",
      "c",
      "cpp",
      "fsharp",
      "csharp",
      "java",
      "kotlin",
      "scala",
      "php"
    ]
  }];
}

message GetTemplateResponse {
  string template = 1;
}

// ########################
// # Supported Languages ##
// ########################

message SupportedLanguage {
  // The language code send during the compile request, this is not the same as
  // the display name. This is also the code used to get the template.
  string language_code = 1;
  // The display name the user can be shown and will understand for example
  // the display name could be C# and the code would be csharp.
  string display_name = 2;
}

message GetSupportedLanguagesResponse {
  repeated SupportedLanguage languages = 1;
}

// ########################
// # Compile Request     ##
// ########################

message CompileRequest {
  string language = 1 [(validate.rules).string = {
    in: [
      "python2",
      "python",
      "node",
      "rust",
      "ruby",
      "go",
      "c",
      "cpp",
      "fsharp",
      "csharp",
      "java",
      "kotlin",
      "scala",
      "php"
    ]
  }];

  string source = 2 [(validate.rules).string = {min_len: 5, max_len: 1024}];

  // This array of strings will be written to the standard input of the code
  // when executing. Each array item is a line which will be written one after
  // another.
  repeated string standard_in_data = 3;

  // This is an array of expected output data, including data here that will
  // result in a validation check on completion. If no items are added to the
  // array then the status endpoint will return NoTest for the test status.
  // Otherwise, a value related to the test result.
  repeated string expected_standard_out_data = 4;
}

message CompileQueueResponse {
  string id = 1;
}

// ########################
// # Get Compile Result  ##
// ########################

message CompileResultRequest {
  string id = 1;
}

message CompileResultResponse {
  string language = 1;
  string status = 2;
  string test_status = 3;

  int64 compile_ms = 4;
  int64 runtime_ms = 5;

  double runtime_memory_mb = 6;

  string output = 7;
  string output_error = 8;
  string compiler_output = 9;
}
