// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: content/consumer/v1/consumer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _GetTemplateRequest_Language_InLookup[m.GetLanguage()]; !ok {
		err := GetTemplateRequestValidationError{
			field:  "Language",
			reason: "value must be in list [python2 python node rust ruby go c cpp fsharp csharp java kotlin scala php]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

var _GetTemplateRequest_Language_InLookup = map[string]struct{}{
	"python2": {},
	"python":  {},
	"node":    {},
	"rust":    {},
	"ruby":    {},
	"go":      {},
	"c":       {},
	"cpp":     {},
	"fsharp":  {},
	"csharp":  {},
	"java":    {},
	"kotlin":  {},
	"scala":   {},
	"php":     {},
}

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Template

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on SupportedLanguage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SupportedLanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupportedLanguage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupportedLanguageMultiError, or nil if none found.
func (m *SupportedLanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *SupportedLanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LanguageCode

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return SupportedLanguageMultiError(errors)
	}

	return nil
}

// SupportedLanguageMultiError is an error wrapping multiple validation errors
// returned by SupportedLanguage.ValidateAll() if the designated constraints
// aren't met.
type SupportedLanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupportedLanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupportedLanguageMultiError) AllErrors() []error { return m }

// SupportedLanguageValidationError is the validation error returned by
// SupportedLanguage.Validate if the designated constraints aren't met.
type SupportedLanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupportedLanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupportedLanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupportedLanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupportedLanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupportedLanguageValidationError) ErrorName() string {
	return "SupportedLanguageValidationError"
}

// Error satisfies the builtin error interface
func (e SupportedLanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupportedLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupportedLanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupportedLanguageValidationError{}

// Validate checks the field values on GetSupportedLanguagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupportedLanguagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedLanguagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSupportedLanguagesResponseMultiError, or nil if none found.
func (m *GetSupportedLanguagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedLanguagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLanguages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSupportedLanguagesResponseValidationError{
						field:  fmt.Sprintf("Languages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSupportedLanguagesResponseValidationError{
						field:  fmt.Sprintf("Languages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSupportedLanguagesResponseValidationError{
					field:  fmt.Sprintf("Languages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSupportedLanguagesResponseMultiError(errors)
	}

	return nil
}

// GetSupportedLanguagesResponseMultiError is an error wrapping multiple
// validation errors returned by GetSupportedLanguagesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSupportedLanguagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedLanguagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedLanguagesResponseMultiError) AllErrors() []error { return m }

// GetSupportedLanguagesResponseValidationError is the validation error
// returned by GetSupportedLanguagesResponse.Validate if the designated
// constraints aren't met.
type GetSupportedLanguagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesResponseValidationError) ErrorName() string {
	return "GetSupportedLanguagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesResponseValidationError{}

// Validate checks the field values on CreateCompileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCompileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCompileRequestMultiError, or nil if none found.
func (m *CreateCompileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _CreateCompileRequest_Language_InLookup[m.GetLanguage()]; !ok {
		err := CreateCompileRequestValidationError{
			field:  "Language",
			reason: "value must be in list [python2 python node rust ruby go c cpp fsharp csharp java kotlin scala php]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSource()); l < 5 || l > 1024 {
		err := CreateCompileRequestValidationError{
			field:  "Source",
			reason: "value length must be between 5 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCompileRequestMultiError(errors)
	}

	return nil
}

// CreateCompileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCompileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCompileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompileRequestMultiError) AllErrors() []error { return m }

// CreateCompileRequestValidationError is the validation error returned by
// CreateCompileRequest.Validate if the designated constraints aren't met.
type CreateCompileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompileRequestValidationError) ErrorName() string {
	return "CreateCompileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompileRequestValidationError{}

var _CreateCompileRequest_Language_InLookup = map[string]struct{}{
	"python2": {},
	"python":  {},
	"node":    {},
	"rust":    {},
	"ruby":    {},
	"go":      {},
	"c":       {},
	"cpp":     {},
	"fsharp":  {},
	"csharp":  {},
	"java":    {},
	"kotlin":  {},
	"scala":   {},
	"php":     {},
}

// Validate checks the field values on CreateCompileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCompileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCompileResponseMultiError, or nil if none found.
func (m *CreateCompileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCompileResponseMultiError(errors)
	}

	return nil
}

// CreateCompileResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCompileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCompileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompileResponseMultiError) AllErrors() []error { return m }

// CreateCompileResponseValidationError is the validation error returned by
// CreateCompileResponse.Validate if the designated constraints aren't met.
type CreateCompileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompileResponseValidationError) ErrorName() string {
	return "CreateCompileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompileResponseValidationError{}

// Validate checks the field values on GetCompileResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompileResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompileResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompileResultRequestMultiError, or nil if none found.
func (m *GetCompileResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompileResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCompileResultRequestMultiError(errors)
	}

	return nil
}

// GetCompileResultRequestMultiError is an error wrapping multiple validation
// errors returned by GetCompileResultRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCompileResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompileResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompileResultRequestMultiError) AllErrors() []error { return m }

// GetCompileResultRequestValidationError is the validation error returned by
// GetCompileResultRequest.Validate if the designated constraints aren't met.
type GetCompileResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompileResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompileResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompileResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompileResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompileResultRequestValidationError) ErrorName() string {
	return "GetCompileResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompileResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompileResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompileResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompileResultRequestValidationError{}

// Validate checks the field values on GetCompileResultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompileResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompileResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompileResultResponseMultiError, or nil if none found.
func (m *GetCompileResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompileResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	// no validation rules for Status

	// no validation rules for TestStatus

	// no validation rules for CompileMs

	// no validation rules for RuntimeMs

	// no validation rules for RuntimeMemoryMb

	// no validation rules for Output

	// no validation rules for OutputError

	// no validation rules for CompilerOutput

	if len(errors) > 0 {
		return GetCompileResultResponseMultiError(errors)
	}

	return nil
}

// GetCompileResultResponseMultiError is an error wrapping multiple validation
// errors returned by GetCompileResultResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCompileResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompileResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompileResultResponseMultiError) AllErrors() []error { return m }

// GetCompileResultResponseValidationError is the validation error returned by
// GetCompileResultResponse.Validate if the designated constraints aren't met.
type GetCompileResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompileResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompileResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompileResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompileResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompileResultResponseValidationError) ErrorName() string {
	return "GetCompileResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompileResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompileResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompileResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompileResultResponseValidationError{}
